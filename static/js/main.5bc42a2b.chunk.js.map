{"version":3,"sources":["actions.js","api/api.js","constants.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","registerServiceWorker.js","reducers.js","index.js"],"names":["requestRobots","dispatch","link","type","fetch","then","response","json","data","payload","catch","error","Card","_ref","name","email","id","React","createElement","className","alt","src","concat","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundary","_Component","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","state","hasError","_inherits","_createClass","value","info","setState","Component","App","apply","arguments","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","ErrorBoundry","connect","searchRobots","event","target","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","initialStateSearch","initialStateRobots","logger","createLogger","rootReducers","combineReducers","length","undefined","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","createRoot","document","getElementById","render","Provider","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.5bc42a2b.chunk.js","sourcesContent":["import { apiCall } from './api/api'\nimport {\n  CHANGE_SEARCHFIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n } from './constants'\n\n\nexport const setSearchField = (text) => ({ type: CHANGE_SEARCHFIELD, payload: text })\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING })\n  apiCall('https://jsonplaceholder.typicode.com/users')\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}","export const apiCall = (link) =>\n  fetch(link).then(response => response.json())","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n      <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card\n              key={i}\n              id={robots[i].id}\n              name={robots[i].name}\n              email={robots[i].email}\n              />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        onChange={searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","import React, { Component } from 'react'\n\nclass ErrorBoundary extends Component {\n  constructor (props) {\n    super(props)\n    this.state = { hasError: false }\n  }\n\n  componentDidCatch (error, info) {\n    this.setState({ hasError: true })\n  }\n\n  render () {\n    if (this.state.hasError) {\n      return <h1>Something went wrong.</h1>\n    }\n    return this.props.children\n  }\n}\n\nexport default ErrorBoundary","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { setSearchField, requestRobots } from '../actions';\n\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\n\nimport './App.css';\n\n// parameter state comes from index.js provider store state(rootReducers)\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending\n  }\n}\n\n// dispatch the DOM changes to call an action. note mapStateToProps returns object, mapDispatchToProps returns function\n// the function returns an object then uses connect to change the data from redecers.\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const { robots, searchField, onSearchChange, isPending } = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n    return (\n      <div className='tc'>\n        <h1 className='f1'>RoboFriends</h1>\n        <SearchBox searchChange={onSearchChange}/>\n        <Scroll>\n          { isPending ? <h1>Loading</h1> :\n            <ErrorBoundry>\n              <CardList robots={filteredRobots} />\n            </ErrorBoundry>\n          }\n        </Scroll>\n      </div>\n    );\n  }\n}\n\n// action done from mapDispatchToProps will channge state from mapStateToProps\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  CHANGE_SEARCHFIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n } from './constants';\n\nconst initialStateSearch = {\n  searchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n  switch (action.type) {\n    case CHANGE_SEARCHFIELD:\n      return Object.assign({}, state, {searchField: action.payload})\n    default:\n      return state\n  }\n}\n\nconst initialStateRobots = {\n  robots: [],\n  isPending: true\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, {isPending: true})\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, {robots: action.payload, isPending: false})\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, {error: action.payload})\n    default:\n      return state\n  }\n}\n","import React from 'react';\n// import ReactDOM from 'react-dom'; The new way to import createRoot:\nimport { createRoot } from \"react-dom/client\";\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport 'tachyons';\n\n\nimport App from './containers/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { requestRobots, searchRobots } from './reducers'\n\nimport './index.css';\n\nconst logger = createLogger() \n\nconst rootReducers = combineReducers({requestRobots, searchRobots})\n\nconst store = createStore(rootReducers, applyMiddleware(thunkMiddleware, logger))\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(\n<Provider store={store}>\n  <App/>\n</Provider>\n);\n\n// ReactDOM.render(\n//   <Provider store={store}>\n//     <App/>\n//   </Provider>,\n//   document.getElementById('root')\n// );\nregisterServiceWorker();\n"],"sourceRoot":""}